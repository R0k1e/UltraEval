import hashlib
from typing import Any
import pdb

import numpy as np


class LogProb:
    def __init__(
        self,
    ):
        pass

    def __call__(self, doc, ground_truth, results) -> Any:
        # pdb.set_trace()
        lowest_score_index = self._argmin(results[0])
        if lowest_score_index is None:
            res = 0
        else:
            keys_list = list(doc["target_scores"].keys())
            target_key = keys_list[lowest_score_index]
            res = doc["target_scores"][target_key]
        return res

    def _argmin(self, array):
        """argmin with deterministic pseudorandom tie breaking."""
        if all(np.isnan(val) for val in array):
            return None
        array = np.where(np.isnan(array), np.inf, array)
        min_indices = np.arange(len(array))[array == np.min(array)]
        idx = int(hashlib.sha256(np.asarray(array).tobytes()).hexdigest(), 16) % len(
            min_indices
        )
        return min_indices[idx]
    
# {"data": {"passage": "", "question": "我们看到一个男人准备扔铁饼。他", "target_scores": {"戴上他的眼镜准备扔。": 0, "旋转转身，把铁饼扔给他面前坐着的另一个男人。": 0, "扔了并走开了，我们看到它慢慢地运动。": 1, "向右走了一步，然后扔给了那个女人。": 0}, "answer": ""}, "ground_truth": "扔了并走开了，我们看到它慢慢地运动。", "prompt_inputs": ["我们看到一个男人准备扔铁饼。他[SPLIT] "], "raw_outputs": [[[-12.750934600830078, -7.495174407958984, -13.955656051635742, -11.60331916809082, -6.2359299659729, -16.045108795166016, -16.808740615844727, -13.792834281921387, -0.002530826721340418, -26.433868408203125, -19.088008880615234, -18.605995178222656, -19.683435440063477, -20.35110855102539, -20.75045394897461, -20.923959732055664, -20.955188751220703, -21.022300720214844], [-13.957662582397461, -15.360944747924805, -11.865163803100586, -13.785396575927734, -3.8015897274017334, -16.98041343688965, -12.339956283569336, -23.223329544067383, -18.98693084716797, -20.113983154296875, -19.34786605834961, -17.622425079345703, -13.95047378540039, -9.89599609375, -15.90252685546875, -16.765756607055664, -9.420528411865234, -0.022737856954336166], [-14.243440628051758, -8.356241226196289, -7.750394821166992, -7.400364875793457, -8.42095947265625, -0.09970250725746155, -12.684974670410156, -10.429630279541016, -18.126676559448242, -17.58667755126953, -9.248235702514648, -9.629756927490234, -8.370121002197266, -2.375483751296997, -24.19171905517578, -18.779094696044922, -19.77992057800293, -19.663936614990234], [-15.129012107849121, -13.208662033081055, -12.628883361816406, -17.823373794555664, -0.7260203957557678, -12.900753021240234, -13.146175384521484, -16.330825805664062, -11.772553443908691, -12.449261665344238, -5.301965236663818, -0.6710606813430786, -29.49220085144043, -23.190046310424805, -20.738113403320312, -20.935226440429688, -20.96163558959961, -21.109960556030273]]], "processed_outputs": [[15.916919351374316, 14.07464896949629, 12.063185051083565, 14.91754056016604]], "eval_results": {"accuracy": 1}, "metrics": {"accuracy": 1}}

